variables:
  #IMAGE: "${CI_REGISTRY}/${CI_REGISTRY_USER}/$CI_PROJECT_NAME"
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:1.0.0-${CI_PIPELINE_IID}"
  CS_ANALYZER_IMAGE: registry.gitlab.com/security-products/container-scanning/trivy:5

stages:
  - build
  - test
  - deploy

check-requirementes-file:
  stage: build
  script:
    - test -s ./requirements.txt

docker-build:
  stage: build
  needs:
    - check-requirementes-file
  image: docker:20.10.21
  variables:
    DOCKER_TLS_CERTDIR: "/certs"

  services:
    - docker:20.10.21-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# container-scanning:
#   stage: test
#   needs:
#     - docker-build
#   image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
#   variables:
#     # To provide a `vulnerability-allowlist.yml` file, override the GIT_STRATEGY variable in your
#     # `.gitlab-ci.yml` file and set it to `fetch`.
#     # For details, see the following links:
#     # https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
#     # https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerability-allowlisting
#     GIT_STRATEGY: none
#   allow_failure: true
#   artifacts:
#     reports:
#       container_scanning: gl-container-scanning-report.json
#       dependency_scanning: gl-dependency-scanning-report.json
#     paths:
#       [gl-container-scanning-report.json, gl-dependency-scanning-report.json]
#   dependencies: []
#   script:
#     - gtcs scan
#   rules:
#     - if: $CONTAINER_SCANNING_DISABLED
#       when: never
#     - if: $SCHEDULED_SECURITY_SCAN_ENABLED
#       when: never

#     # Add the job to merge request pipelines if there's an open merge request.
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" &&
#         $CI_GITLAB_FIPS_MODE == "true" &&
#         $CS_ANALYZER_IMAGE !~ /-(fips|ubi)\z/
#       variables:
#         CS_IMAGE_SUFFIX: -fips
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"

#     # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
#     - if: $CI_OPEN_MERGE_REQUESTS
#       when: never

#     # Add the job to branch pipelines.
#     - if: $CI_COMMIT_BRANCH == "master"

container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    FULL_IMAGE_NAME: "$IMAGE_TAG"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --download-db-only --no-progress --cache-dir .trivycache/
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json

deploy:
  stage: deploy
  script:
    - echo "Deploying to k8s $CI_COMMIT_BRANCH"
  when: manual