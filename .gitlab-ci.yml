include:
  - template: Code-Quality.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  # - template: Auto-DevOps.gitlab-ci.yml

variables:
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:1.0.$CI_PIPELINE_IID"
  CS_ANALYZER_IMAGE: docker.io/aquasec/trivy:latest
  FAIL_ON_CRITICAL_VULNERABILITIES: "false"
  CODE_QUALITY_DISABLED: "true"
  # CONTAINER_SCANNING_DISABLED: "true"
  PROD_ENV_URL: "https://prod.thisisthis.info"
  STAGING_ENV_URL: https://staging.thisisthis.info

stages:
  - build
  - test
  - review
  - deploy_staging
  - publish_pages
  - deploy_production

test_artifacts: # to delete
  stage: build
  script:
    - echo "IMAGE_TAG=$IMAGE_TAG" > builder.env
  artifacts:
    paths:
      - "builder.env"

check_files:
  tags:
    - local
    - docker
  needs: # to delete
    - test_artifacts
  stage: build
  image: alpine:latest
  script:
    - ls -ltrha && printenv | grep -i image # to delete
    - echo "ENV VARS:" && printenv
    - test -s requirements.txt
    - test -s Dockerfile

docker_build:
  stage: build
  image: docker:20.10.21
  needs:
    - check_files
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:20.10.21-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

code_quality:
  stage: test
  needs:
    - check_files
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]
    expire_in: 60 minutes
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: $CI_COMMIT_TAG

container_scanning:
  stage: test
  needs:
    - docker_build
  # Document: https://aquasecurity.github.io/trivy/v0.18.3/integrations/gitlab-ci/
  image:
    name: $CS_ANALYZER_IMAGE
    entrypoint: [""]
  
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    FULL_IMAGE_NAME: "$IMAGE_TAG"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only --no-progress --cache-dir .trivycache/
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - if [[ $(echo $FAIL_ON_CRITICAL_VULNERABILITIES | awk '{print tolower($0)}') == "true" ]]; then time trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$FULL_IMAGE_NAME"; fi
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - .trivycache/
    policy: pull-push
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: $CI_COMMIT_TAG

cache_user_job:
  stage: test
  script: # to delete
    - ls -tlhrad .trivy* && ls -tlhra .trivy*
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - .trivycache/
    policy: pull # Only use the cache and don't save it

deploy_review:
  stage: review
  image: docker:20.10.21
  variables:
    GIT_STRATEGY: none
    CONTAINER_NAME: "${CI_PROJECT_NAME}-review"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker container rm -f $CONTAINER_NAME|| true
  script:
    - docker container run -d --name $CONTAINER_NAME -e APP_SECRET_KEY=${APP_SECRET_KEY} -p 127.0.0.1:9000:5000 $IMAGE_TAG
    - sleep 2
    - docker container logs $CONTAINER_NAME
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://test.jsplatform.workers.dev/review
    on_stop: stop_review
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stop_review:
  stage: review
  image: docker:20.10.21
  variables:
    GIT_STRATEGY: none
  script:
    - docker container rm -f ${CI_PROJECT_NAME}-review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://test.jsplatform.workers.dev/review
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual

.deploy:
  image: docker:20.10.21
  variables:
    DEPLOY_ENV: ""
    CONTAINER_NAME: "${CI_PROJECT_NAME}-${DEPLOY_ENV}"
    ENV_URL: ""
    SSH_KEY_FILE: ""
    SSH_USER_IP: ""
    APP_PORT: ""
  environment:
    name: $DEPLOY_ENV
    url: $ENV_URL
  script:
    - ls -ltrha # to delete
    - unset DOCKER_HOST
    - chmod 400 $SSH_KEY_FILE
    - eval "$(ssh-agent -s)"
    - ssh-add $SSH_KEY_FILE
    - echo "CHECKING IF THE KEY WAS ADDED TO SSH-AGENT:" && ssh-add -l # to delete
    - echo "StrictHostKeyChecking no" >> $(find /etc -iname ssh_config)
    - docker context create prod --docker "host=ssh://$SSH_USER_IP"
    - docker context use prod
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker container rm -f $CONTAINER_NAME || true
    - docker container run -d --name $CONTAINER_NAME -e APP_SECRET_KEY=${APP_SECRET_KEY} -p $APP_PORT:5000 $IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

staging:
  extends: .deploy
  stage: deploy_staging
  variables:
    DEPLOY_ENV: "staging"
    CONTAINER_NAME: "${CI_PROJECT_NAME}-${DEPLOY_ENV}"
    ENV_URL: $STAGING_ENV_URL
    SSH_KEY_FILE: $STAGING_SSH_KEY
    SSH_USER_IP: $STAGING_SSH_USER_IP
    APP_PORT: 9002

functional test:
  image: curlimages/curl
  stage: deploy_staging
  script:
    - curl -v --max-time 10 $STAGING_ENV_URL

pages:
  stage: publish_pages
  script:
    - mkdir public
    - echo "HElloooooo" > public/index.html
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

production:
  extends: .deploy
  stage: deploy_production
  variables:
    DEPLOY_ENV: "production"
    CONTAINER_NAME: "${CI_PROJECT_NAME}-${DEPLOY_ENV}"
    ENV_URL: "$PROD_ENV_URL"
    SSH_KEY_FILE: $PROD_SSH_KEY
    SSH_USER_IP: $PROD_SSH_USER_IP
    APP_PORT: 9001
  when: manual
